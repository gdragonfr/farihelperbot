from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import os
import threading
from flask import Flask

# ---------- keep_alive –¥–ª—è Replit ----------
app_web = Flask(__name__)

@app_web.get("/")
def home():
    return "Bot is running!"

def _run_web():
    app_web.run(host="0.0.0.0", port=8080)

def keep_alive():
    threading.Thread(target=_run_web, daemon=True).start()


# ---------- –ö–û–ù–§–ò–ì: –ø–æ—Ä—è–¥–æ–∫ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è ----------
# –£–∫–∞–∂–∏ –ò–ú–ï–ù–ê –§–ê–ô–õ–û–í —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –≤ Replit:
ORDER = [
    "4, 5 —Å—Ç–∞—Ç—å—è –ó–û–ö–î.mp4",
    "14 —Å—Ç–∞—Ç—å—è –ó–û–ö–î.mp4",
    "16, 11, 6 —Å—Ç–∞—Ç—å—è –ó–û–ö–î.mp4",
    "–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è.mp4",
    "–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è 2 —á–∞—Å—Ç—å.mp4",
    "–°–∞–Ω–∫—Ü–∏–∏.mp4",
    "–°–∞–Ω–∫—Ü–∏–∏ 2 —á–∞—Å—Ç—å.mp4"
]

# –ö–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö)
TITLES = {
    "4, 5 —Å—Ç–∞—Ç—å—è –ó–û–ö–î.mp4": "4‚Äì5 —Å—Ç–∞—Ç—å—è –ó–û–ö–î",
    "–°–∞–Ω–∫—Ü–∏–∏.mp4": "–°–∞–Ω–∫—Ü–∏–∏",
    "–°–∞–Ω–∫—Ü–∏–∏ —á–∞—Å—Ç—å 2.mp4": "–°–∞–Ω–∫—Ü–∏–∏ ‚Äî —á–∞—Å—Ç—å 2",
}

def get_videos():
    """–°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: —Å–Ω–∞—á–∞–ª–∞ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑ ORDER (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å),
    –∑–∞—Ç–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ .mp4, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ ORDER ‚Äî –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É."""
    all_mp4 = [f for f in os.listdir(".") if f.lower().endswith(".mp4")]
    ordered_existing = [f for f in ORDER if f in all_mp4]
    rest = sorted([f for f in all_mp4 if f not in ordered_existing])
    return ordered_existing + rest

def pretty_name(file_name: str) -> str:
    # –ü–æ–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–µ: –∏–∑ —Å–ª–æ–≤–∞—Ä—è TITLES, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ .mp4
    return TITLES.get(file_name, os.path.splitext(file_name)[0])

def menu_keyboard():
    files = get_videos()
    buttons = [[InlineKeyboardButton(f"üé• {pretty_name(f)}", callback_data=f"video::{f}")]
               for f in files]
    return InlineKeyboardMarkup(buttons)


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=menu_keyboard())


# ---------- –ö–Ω–æ–ø–∫–∏ ----------
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("video::"):
        file_name = query.data.split("::", 1)[1]
        try:
            with open(file_name, "rb") as f:
                await query.message.reply_video(f, caption=f"üé• {pretty_name(file_name)}")
        except Exception as e:
            await query.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {file_name}: {e}")
        finally:
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ:", reply_markup=menu_keyboard())


# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    keep_alive()  # –¥–ª—è Replit
    TOKEN = "8314917201:AAGm_Ax9pKl8NOX5_XQncUKcHKogpdAf6JY"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_button))

    print("üìÇ –§–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ:", os.listdir("."))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()